import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        try(Scanner sc = new Scanner(System.in)){

            PrintWriter out = new PrintWriter(System.out);
            StringBuilder sb = new StringBuilder();

            int n = Integer.parseInt(sc.next());

            Map<Integer, Long> rmap = new HashMap<>();
            Map<Integer, Long> cmap = new HashMap<>();
            Map<String, Long> pmap = new HashMap<>();  // Change to use String keys

            for(int i = 0; i < n; i++) {
                int r = Integer.parseInt(sc.next());
                int c = Integer.parseInt(sc.next());
                Long x = Long.parseLong(sc.next());

                rmap.merge(r, x, Long::sum);
                cmap.merge(c, x, Long::sum);

                String key = r + "," + c; // Create a unique string key
                pmap.put(key, x);
            }

            List<Entry<Integer, Long>> list = new ArrayList<>(cmap.entrySet());
            list.sort((a, b) -> Long.compare(b.getValue(), a.getValue()));  // Sort in descending order

            long ans = 0L;
            for(Map.Entry<Integer, Long> row : rmap.entrySet()) {
                for(Entry<Integer, Long> cmax : list) {  // Iterate through the descending order list
                    String key = row.getKey() + "," + cmax.getKey(); // Use the string key

                    Long v = pmap.get(key);

                    if(v == null) {
                        ans = Math.max(ans, row.getValue() + cmax.getValue());
                        break;
                    } else {
                        ans = Math.max(ans, row.getValue() + cmax.getValue() - v);
                    }
                }
            }

            sb.append(ans);

            out.println(sb.toString());
            out.flush();

        }

    }

}