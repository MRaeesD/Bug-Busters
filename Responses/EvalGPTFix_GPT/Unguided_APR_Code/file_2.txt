import java.io.*;
            import java.util.ArrayDeque;
            import java.util.Deque;
            import java.util.StringTokenizer;

            public class Main {
                public static void main(String[] args) throws Throwable {
                    Main main = new Main();
                    main.solve();
                }
                public void solve() throws Throwable {
                    FastScan scan = new FastScan(System.in);
                    PrintWriter pw = new PrintWriter(System.out);
                    int Q = scan.nextInt();
                    long current = 0;  // Initialize to 0 if no value previously exists
                    long mod = 998244353;
                    int length = 0;  // Correct initial value set as per Deque content
                    Deque<Integer> d = new ArrayDeque<>();
                    long[] c = new long[6500000];
                    c[0] = 1;
                    // Precompute powers of 10 modulo mod
                    for (int i = 1; i < 6500000; i++) {
                        c[i] = (c[i - 1] * 10) % mod;
                    }
                    for (int i = 0; i < Q; i++) {
                        int type = scan.nextInt();
                        if (type == 1) {
                            int x = scan.nextInt();
                            length += 1;  // Update length first to align correctly with powers
                            current = (current * 10 + x) % mod;
                            d.add(x);
                            continue;
                        }
                        if (type == 2) {
                            if (!d.isEmpty()) {
                                int f = d.pollFirst(); // Correct type is int
                                current = (current - ((f * c[length - 1]) % mod) + mod) % mod;  // Adjust with mod to prevent negative
                                length -= 1;  // Update length after removing an element
                            }
                            continue;
                        }
                        if (type == 3) {
                            pw.println(current);
                        }
                    }
                    pw.flush();
                    pw.close();
                }
                class FastScan {
                    BufferedReader br;
                    StringTokenizer st;
                    FastScan(InputStream is) {
                        InputStreamReader isr = new InputStreamReader(is);
                        this.br = new BufferedReader(isr);
                    }
                    String next() throws IOException {
                        while (this.st == null || !this.st.hasMoreTokens()) {
                            this.st = new StringTokenizer(br.readLine().trim());
                        }
                        return st.nextToken();
                    }
                    long nextLong() throws IOException {
                        return Long.parseLong(this.next());
                    }
                    int nextInt() throws IOException {
                        return Integer.parseInt(this.next());
                    }
                }
            }