import java.io.BufferedReader;
            import java.io.BufferedWriter;
            import java.io.IOException;
            import java.io.InputStreamReader;
            import java.io.OutputStreamWriter;
            import java.io.PrintWriter;
            import java.io.StreamTokenizer;
            import java.util.ArrayList;
            import java.util.List;
            import java.util.Map;
            import java.util.HashMap;
            import java.util.Set;
            
            public class Main {
                static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
                private static StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
                static int chu = 0;  // Moved 'chu' to a global scope
                static List<Integer> list = new ArrayList<>();  // Move list to global scope
                static long ans = 1;  // Moved 'ans' to a global scope
                
                private static int Int() {
                    try {
                        st.nextToken();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    return (int) st.nval;
                }
                
                static long gcd(long a, long b) {
                    return b == 0 ? a : gcd(b, a % b);
                }
                
                public static void main(String[] args) {
                    int t = 1;
                    long mod = 998244353L;
                    long[] bs = new long[600001];
                    bs[1] = 1;
                    for (int i = 2; i < bs.length; i++) {
                        bs[i] = bs[i - 1] * 10;
                        bs[i] %= mod;
                    }
                    
                    while (t-- > 0) {
                        int q = Int();
                        list.clear();  // Clear the global list instead of redeclaring
                        list.add(1);
                        ans = 1;
                        chu = 0;  // Reset chu at each iteration
                        for (int i = 0; i < q; i++) {
                            int k = Int();
                            if (k == 1) {
                                int x = Int();
                                list.add(x);
                                ans *= 10;
                                ans += x;
                                ans %= mod;
                            } else if (k == 2) {
                                int le = list.size() - chu;
                                long jian = list.get(chu) * bs[le];
                                jian %= mod;
                                ans = (ans - jian + mod) % mod;  // Ensure ans doesn't go negative
                                chu++;
                            } else {
                                out.println(ans);
                            }
                        }
                    }
                    out.close();
                }
            }