import java.util.*;
import java.lang.*;
import java.io.*;

public class Main {

    public static void main(String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);
        FastReader sc = new FastReader();
        int testCases = 1;

        while (testCases-- > 0) {

            long s = 0;
            int q = sc.nextInt();
            int mod = 998244353;
            Queue<Integer> st = new LinkedList<>();
            st.add(1);
            long pow = 1;

            for (int i = 0; i < q; i++) {
                int t = sc.nextInt();
                if (t == 1) {
                    int d = sc.nextInt();
                    s = s * 10 + d;
                    s %= mod;
                    st.add(d);
                    pow = (pow * 10) % mod; 
                } else if (t == 2) {
                    if (!st.isEmpty()) {
                        int d = st.poll();
                        pow = (pow * power(10, mod - 2)) % mod;
                        s = ((s - d * power(pow, st.size(), mod) % mod) + mod) % mod;
                    }
                } else if (t == 3) {
                    out.println(s);
                }
            }

        }
        out.close();
    }
    
    public static long power(long a, long b, long mod) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                res = (res * a) % mod;
            }
            a = (a * a) % mod;
            b >>= 1;
        }
        return res;
    }

    // FastReader and other utility methods/classes remain unchanged
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(
                    new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
}