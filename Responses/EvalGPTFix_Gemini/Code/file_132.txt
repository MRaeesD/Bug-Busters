import java.util.Arrays;
    import java.util.Scanner;
    import java.util.stream.Collectors;

    public class Main {













        static final Scanner sc = new Scanner(System.in);
        static void sysout(int[] a) {
            sysout(Arrays.stream(a).mapToObj(e -> e + "").collect(Collectors.joining(" ")));
        }
        static void sysout(int[][] aa) {
            for (int[] a : aa)
                sysout(Arrays.stream(a).mapToObj(e -> e + "").collect(Collectors.joining(" ")));
        }
        static void sysout(Object[] a) {
            sysout(Arrays.stream(a).map(e -> e + "").collect(Collectors.joining(" ")));
        }
        static void sysout(Object o) {
            System.out.println(o);
        }

        static int[] nextAInt() {
            return nextAInt(nextInt());
        }
        static int[] nextAInt(int len) {
            int[] a = new int[len];
            for (int i = 0; i < len; ++i) a[i] = sc.nextInt();
            return a;
        }
        static int[][] nextAAInt(int h, int w) {
            int[][] aa = new int[h][w];
            for (int i = 0; i < h; ++i) aa[i] = nextAInt(w);
            return aa;
        }
        static long[] nextALong() {
            return nextALong(nextInt());
        }
        static long[] nextALong(int len) {
            long[] a = new long[len];
            for (int i = 0; i < len; ++i) a[i] = sc.nextLong();
            return a;
        }
        static double[] nextADouble() {
            return nextADouble(nextInt());
        }
        static double[] nextADouble(int len) {
            double[] a = new double[len];
            for (int i = 0; i < len; ++i) a[i] = sc.nextDouble();
            return a;
        }
        static String[] nextAString() {
            return nextAString(nextInt());
        }
        static String[] nextAString(int len) {
            String[] a = new String[len];
            for (int i = 0; i < len; ++i) a[i] = sc.next();
            return a;
        }

        static int nextInt() {
            return sc.nextInt();
        }
        static long nextLong() {
            return sc.nextLong();
        }
        static double nextDouble() {
            return sc.nextDouble();
        }
        static String nextStr() {
            return sc.next();
        }

        public static void main(String[] args) {
            solve();
        }

        static void solve() {
            int n = nextInt();
            int[][] a = nextAAInt(n, n);
            int[][] b = nextAAInt(n, n);
            boolean flag = false;
            label:
            for (int t = 0; t < 4; ++t) { // increased rotation limit to 4
                flag = true; // assume match at the beginning of each rotation
                for (int i = 0; i < n; ++i) {
                    for (int j = 0; j < n; ++j) {
                        if (a[i][j] == 1 && b[i][j] != 1) {
                            flag = false; // mark as no match if a mismatch is found
                            break; // no need to continue checking in this rotation
                        }
                    }
                    if (!flag) break; // move to next rotation if no match found
                }
                if (flag) break label; // exit outer loop if a match is found
                a = rotateCCW90(a, n); // rotate only if no match found in the current rotation
            }
            sysout(flag ? "Yes" : "No");
        }

        static int[][] rotateCCW90(int[][] aa, int n) {
            int[][] ret = new int[n][n];
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    ret[n - j - 1][i] = aa[i][j];
                }
            }
            return ret;
        }
    }