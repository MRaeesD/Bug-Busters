import java.io.*;
    import java.util.*;
    import java.util.stream.Collectors;

    public class Main {

      static BufferedReader br;

      public static void main(String[] args) {
        br = new BufferedReader(new InputStreamReader(System.in));
        try {
          br = new BufferedReader(new FileReader("input.txt"));
        } catch (Exception e) {}

        int N = readInt();
        int Q = readInt();
        int[][] query = readMultiIntArray(Q);
        ArrayList<ArrayList<Integer>> box = new ArrayList<>(N + 1);
        ArrayList<HashSet<Integer>> card = new ArrayList<>(200001);
        for (int i = 0; i < N + 1; i++) {
          box.add(new ArrayList<>());
        }
        for (int i = 0; i < 200001; i++) {
          card.add(new HashSet<>());
        }
        for (int[] i : query) {
          if (i[0] == 1) {
            box.get(i[2]).add(i[1]);
            card.get(i[1]).add(i[2]);
          }
          if (i[0] == 2) {
            // Use a Comparator to handle potential null values
            Collections.sort(box.get(i[1]), Comparator.nullsFirst(Comparator.naturalOrder()));
            System.out.println(
              box
                .get(i[1])
                .stream()
                .map(Object::toString)
                .collect(Collectors.joining(" "))
            );
          }
          if (i[0] == 3) {
            List<Integer> list = new ArrayList<>(card.get(i[1]));
            // Use a Comparator to handle potential null values
            Collections.sort(list, Comparator.nullsFirst(Comparator.naturalOrder()));
            System.out.println(
              list
                .stream()
                .map(Object::toString)
                .collect(Collectors.joining(" "))
            );
          }
        }

        try {
          br.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }

      // ... [Rest of the methods remain unchanged] ... 
    }