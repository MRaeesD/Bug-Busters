import java.util.*;
import java.lang.*;
import java.io.*;

public class Main {
    static final int mod = 998244353;
    static long[] inv10;

    public static void main(String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);
        FastReader sc = new FastReader();
        int testCases = 1;

        while (testCases-- > 0) {
            long s = 1;
            int q = sc.nextInt();
            Queue<Integer> st = new LinkedList<>();
            st.add(1);

            // Precompute modular inverses for powers of 10
            inv10 = new long[q + 1];
            inv10[0] = 1;
            inv10[1] = power(10, mod - 2);
            for (int i = 2; i <= q; i++) {
                inv10[i] = (inv10[i - 1] * inv10[1]) % mod;
            }

            long pow = 1;
            for (int i = 0; i < q; i++) {
                int t = sc.nextInt();
                if (t == 1) {
                    int d = sc.nextInt();
                    s = (s * 10 + d) % mod;
                    pow = (pow * 10) % mod;
                    st.add(d);
                } else if (t == 2) {
                    long d = st.isEmpty() ? 0 : st.poll();
                    s = (s - d * pow % mod + mod) % mod; 
                    pow = (pow * inv10[st.size() + 1]) % mod; 
                } else if (t == 3) {
                    out.println(s);
                }
            }
        }
        out.close();
    }

    public static long power(long a, long b) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) == 1) res = (res * a) % mod;
            a = (a * a) % mod;
            b >>= 1;
        }
        return res;
    }

    // ... rest of the code ...
}