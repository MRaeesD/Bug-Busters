import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.ArrayDeque;
import java.util.Deque;

public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();

        // Read the initial number
        while (true) {
            int c = reader.read();
            if (c < '0' || c > '9') {
                break;
            }
            sb.append((char) c);
        }

        int numQueries = Integer.parseInt(sb.toString());
        System.out.println(numQueries);

        long value = 1;
        long mod = 998244353L;
        long base = 1;
        long inverseBase = BigInteger.TEN.modInverse(BigInteger.valueOf(mod)).longValue();
        Deque<Integer> numbers = new ArrayDeque<>();
        numbers.add(1);

        for (int i = 0; i < numQueries; i++) {
            String line = reader.readLine();

            // Handle empty lines gracefully
            if (line == null || line.trim().isEmpty()) {
                continue;
            }

            String[] parts = line.trim().split(" ");

            // Ensure command exists before accessing
            if (parts.length > 0) { 
                switch (parts[0]) {
                    case "1":
                        if (parts.length == 2) { // Ensure argument is present
                            int r = Integer.parseInt(parts[1]);
                            numbers.add(r);
                            base = (base * 10) % mod;
                            value = (value * 10 + r) % mod;
                        }
                        break;
                    case "2":
                        if (!numbers.isEmpty()) { // Prevent errors if deque is empty
                            int firstElement = numbers.poll();
                            value = (value - (base * firstElement) % mod + mod) % mod; // Handle potential negative results
                            base = (base * inverseBase) % mod;
                        }
                        break;
                    case "3":
                        System.out.println(value);
                        break;
                    default:
                        // Handle unexpected command (optional logging)
                        break;
                }
            }
        }
        reader.close();
    }
}