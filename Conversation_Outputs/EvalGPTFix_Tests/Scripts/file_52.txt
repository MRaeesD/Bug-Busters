import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

public class Main {

  static BufferedReader br;

  public static void main(String[] args) {
    try {
      br = new BufferedReader(new FileReader("input.txt"));
    } catch (FileNotFoundException e) {
      System.err.println("File not found: " + e.getMessage());
      return; // Exit the program if the file is not found
    }

    int N = readInt();
    int Q = readInt();
    int[][] query = readMultiIntArray(Q);
    ArrayList<ArrayList<Integer>> box = new ArrayList<>(N + 1);
    ArrayList<HashSet<Integer>> card = new ArrayList<>(200001);
    for (int i = 0; i < N + 1; i++) {
      box.add(new ArrayList<>());
    }
    for (int i = 0; i < 200001; i++) {
      card.add(new HashSet<>());
    }
    for (int[] i : query) {
      if (i[0] == 1) {
        box.get(i[2]).add(i[1]);
        card.get(i[1]).add(i[2]);
      }
      if (i[0] == 2) {
        Collections.sort(box.get(i[1])); // Fixed: Use natural ordering for sorting
        System.out.println(
          box
            .get(i[1])
            .stream()
            .map(Object::toString)
            .collect(Collectors.joining(" "))
        );
      }
      if (i[0] == 3) {
        List<Integer> list = new ArrayList<>(card.get(i[1]));
        Collections.sort(list); // Ensure the list is sorted
        System.out.println(
          list
            .stream()
            .map(Object::toString)
            .collect(Collectors.joining(" ")) // Fixed: Print the sorted list
        );
      }
    }

    try {
      br.close();
    } catch (IOException e) {
      System.err.println("Error closing BufferedReader: " + e.getMessage()); // Log the exception
    }
  }

  public static int[] readIntArray() {
    int[] array = null;
    try {
      array =
        Arrays
          .stream(br.readLine().split(" "))
          .mapToInt(Integer::parseInt)
          .toArray();
    } catch (IOException ex) {
      System.err.println("Error reading int array: " + ex.getMessage()); // Log the exception
    }
    return array;
  }

  public static int[][] readMultiIntArray(int num) {
    int[][] array = new int[num][];
    for (int i = 0; i < num; i++) {
      array[i] = readIntArray();
    }
    return array;
  }

  public static String[] readStringArray() {
    String[] array = null;
    try {
      array = br.readLine().split(" ");
    } catch (IOException ex) {
      System.err.println("Error reading string array: " + ex.getMessage()); // Log the exception
    }
    return array;
  }

  public static int readInt() {
    int num = 0;
    try {
      num = Integer.parseInt(br.readLine());
    } catch (IOException ex) {
      System.err.println("Error reading int: " + ex.getMessage()); // Log the exception
    }
    return num;
  }

  public static String readString() {
    String str = null;
    try {
      str = br.readLine();
    } catch (IOException ex) {
      System.err.println("Error reading string: " + ex.getMessage()); // Log the exception
    }
    return str;
  }
}