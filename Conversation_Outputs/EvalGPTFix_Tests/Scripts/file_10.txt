import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	
	public static void main(String[] args) {
		
		try (Scanner sc = new Scanner(System.in);) {
			
			PrintWriter out = new PrintWriter(System.out);
			StringBuilder sb = new StringBuilder();
			
			int q = Integer.parseInt(sc.next());
			final int mod = 998244353;
			
			Queue<Integer> queue = new ArrayDeque<>();
			// Track the power of 10 for each digit in the queue
			Queue<Long> powerQueue = new ArrayDeque<>(); 
			queue.add(1);
			powerQueue.add(1L);
			long ans = 1L;
			
			for (int i = 0; i < q; i++) {
				int index = Integer.parseInt(sc.next());
				
				if (index == 1) {
					int x = Integer.parseInt(sc.next());
					queue.add(x);
					powerQueue.add(powerQueue.peek() * 10 % mod);
					ans = ans * 10 + x;
					ans %= mod;
					
				} else if (index == 2) {
					int x = queue.poll();
					// Retrieve the correct power of 10 for the removed digit
					long power = powerQueue.poll(); // BUG was here - incorrect power calculation
					long s = x * power % mod;
					ans = (ans - s + mod) % mod; // Ensure non-negative result
					
				} else {
					sb.append(ans).append("\n");
				}
			}
			
			out.println(sb.toString());
			out.flush();
			
		}
		
	}
	
	static long power(long x, long n, int m) {
		long ans = 1;
		
		while (n > 0) {
			if ((n & 1) != 0) {
				ans *= x;
				ans %= m;
			}
			
			x *= x;
			n /= 2;
			
		}
		
		return ans;
	}
}